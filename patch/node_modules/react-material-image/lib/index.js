'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactMaterialImage = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var PropTypes = require('prop-types');

var _react2 = _interopRequireDefault(_react);

var _materialUi = require('material-ui');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = {
  root: {
    width: 300,
    height: 200
  },
  loading: {
    position: 'relative'
  },
  img: {
    width: 'inherit',
    height: 'inherit'
  }
};

var ReactMaterialImage = exports.ReactMaterialImage = function (_Component) {
  _inherits(ReactMaterialImage, _Component);

  function ReactMaterialImage(props) {
    _classCallCheck(this, ReactMaterialImage);

    var _this = _possibleConstructorReturn(this, (ReactMaterialImage.__proto__ || Object.getPrototypeOf(ReactMaterialImage)).call(this, props));

    _this.state = {
      imageLoaded: false,
      imageError: false
    };
    return _this;
  }

  _createClass(ReactMaterialImage, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var loadingSize = this.props.loadingSize || 40;
      return _react2.default.createElement(
        'div',
        { style: _extends({}, styles.root, this.props.style) },
        !this.state.imageLoaded && !this.state.imageError ? _react2.default.createElement(_materialUi.RefreshIndicator, {
          size: loadingSize,
          left: this.props.style && this.props.style.width ? this.props.style.width / 2 - loadingSize : styles.root.width / 2 - loadingSize / 2,
          top: this.props.style && this.props.style.height ? this.props.style.height / 2 - loadingSize : styles.root.height / 2 - loadingSize / 2,
          status: 'loading',
          style: _extends({}, styles.loading, this.props.loadingStyle)
        }) : null,
        _react2.default.createElement('img', _extends({}, this.props, {
          onClick: this.props.onTouchTap,
          style: _extends({}, styles.img, this.props.imageStyle),
          onLoad: function onLoad() {
            return _this2.setState({ imageLoaded: true });
          },
          onError: function onError() {
            return _this2.setState({ imageError: true });
          }
        }))
      );
    }
  }]);

  return ReactMaterialImage;
}(_react.Component);

ReactMaterialImage.propTypes = {
  src: PropTypes.string.isRequired,
  onTouchTap: PropTypes.func,
  style: PropTypes.object,
  imageStyle: PropTypes.object,
  loadingSize: PropTypes.number,
  loadingStyle: PropTypes.object
};
